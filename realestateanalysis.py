# -*- coding: utf-8 -*-
"""RealEstateAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZKNjiOjdUzOE6ofrKiCYdexd6ml1Q6xK
"""

############################################FOCUSING ON GETTING REFINED NYC DATASET WITH LATITUDE AND LONGITUDE##########################################################
import pandas as pd
#datasetUrl = "http://files.zillowstatic.com/research/public_v2/zhvi/Neighborhood_Zhvi_AllHomes.csv" #THIS IS FOR A LESS COMPLETE DATABASE
datasetUrl = "https://raw.githubusercontent.com/19neloyk/DataSetsIFound/master/Neighborhood_MedianValuePerSqft_AllHomes%202.csv"
pd.set_option('display.max_rows', 10) #Choosing how many rows will be shown 
pd.set_option('display.max_columns', 10) #Choosing how many columns will be shown
df = pd.read_csv(datasetUrl, index_col=0, parse_dates=True)

nycDF = df.loc[(df["City"] == "New York")]

nycDF

import requests
import json

url = "https://us1.locationiq.com/v1/search.php" #Using the LocationIQ API to collect latitudes and longitudes, 
                                                 #API can be used to collect boundaries of neighborhoods as well!!
                                                 #(^USEFUL FOR VISUALIZATION^)
data = {
    'key': '', #Enter key here
    'q': 'Jackson Heights New York City',
    'format': 'json'
}

import time 

latitudes = []
longitudes = []

for region in nycDF["RegionName"]:
  data['q'] = region + ' New York City USA'
  response = requests.get(url, params=data)
  answer = response.json()
  time.sleep(1)
  lati = answer[0]["lat"]
  long = answer[0]["lon"]
  latitudes.append(lati)
  longitudes.append(long)

print(len(latitudes))
print(len(longitudes))

nycDF['latitude'] = latitudes
nycDF['longitude'] = longitudes
from google.colab import files

nycDF.to_csv('nycMedCostPSqFtWithLatLong.csv')
files.download('nycMedCostPSqFtWithLatLong.csv')

############################FOCUSING ON TURNING NEW DATASET INTO A MAP WHERE COLOR CORRELATES WITH VALUE###########################################
import pandas as pd

datasetUrl = "https://raw.githubusercontent.com/19neloyk/DataSetsIFound/master/nycMedCostPSqFtWithLatLong.csv"
df = pd.read_csv(datasetUrl, index_col=0, parse_dates=True)

df.plot.scatter(     x ='longitude',
                     y ='latitude',
                     c =df['2009-02'],
              colormap = 'jet')

def incrementDate(dateString,timeIncInMonths):    #used to increment date by however many months in string form
  date = dateString.split("-")
  year = int(date[0])
  month = int(date[1])
  yearInc = int(timeIncInMonths/12)
  year = year + yearInc
  monthInc = timeIncInMonths%12
  month = month + monthInc
  if month>12:
    month = month-12
    year = year + 1
  year = str(year)
  month = str(month)
  if len(month) == 1:
    month = "0"+ month
  return year+"-"+month
print(incrementDate("1999-08",27))

# Define valueIncrease to handle 1 or 2 parameters:
# 1 parameter: one input date (calculating value increase one month after the input date),
# 2 parameters: two input dates (calculating value increase between the input dates)
def valueIncreaseTwoInputs(dateString1,dateString2):
  if dateString1 not in df.columns or dateString2 not in df.columns:
    print("NOT POSSIBLE")
    print("AT ALL")
    print("BECAUSE OF")
    print("INVALID DATE")
    print("VVVVVVVVVVVV")
    df["valueChange"] = "" #This creates an empty column
  else:
    df["valueChange"] = df[dateString2] / df[dateString1]
    return df["valueChange"]

def valueIncrease(dateString):
  df["valueChange"] = valueIncreaseTwoInputs(dateString,incrementDate(dateString,1))
  return df["valueChange"]

valueIncrease('2019-09')
valueIncreaseTwoInputs('2009-09', '2019-09')
df.plot.scatter(     x ='longitude',
                     y ='latitude',
                     c ='valueChange',
             colormap = 'jet')
